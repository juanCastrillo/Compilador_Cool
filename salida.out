Grammar:

Rule 0     S' -> program
Rule 1     program -> class_list
Rule 2     class_list -> clas ;
Rule 3     class_list -> class_list clas ;
Rule 4     clas -> CLASS TYPEID INHERITS TYPEID { }
Rule 5     clas -> CLASS TYPEID INHERITS TYPEID { feature_list }
Rule 6     clas -> CLASS TYPEID { }
Rule 7     clas -> CLASS TYPEID { feature_list }
Rule 8     feature_list -> error ;
Rule 9     feature_list -> feature_list feature ;
Rule 10    feature_list -> feature ;
Rule 11    feature -> OBJECTID ( ) : TYPEID { error }
Rule 12    feature -> OBJECTID : TYPEID
Rule 13    feature -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 14    feature -> OBJECTID ( formal_list ) : TYPEID { expr }
Rule 15    feature -> OBJECTID ( ) : TYPEID { expr }
Rule 16    formal_list -> formal_list error formal
Rule 17    formal_list -> formal_list , formal
Rule 18    formal_list -> formal
Rule 19    formal -> OBJECTID : TYPEID
Rule 20    expr -> CASE error OF case_list ESAC
Rule 21    expr -> BOOL_CONST
Rule 22    expr -> STR_CONST
Rule 23    expr -> INT_CONST
Rule 24    expr -> OBJECTID
Rule 25    expr -> ( expr )
Rule 26    expr -> NOT expr  [precedence=left, level=2]
Rule 27    expr -> expr = expr  [precedence=right, level=3]
Rule 28    expr -> expr = expr = expr  [precedence=right, level=3]
Rule 29    expr -> expr LE expr  [precedence=right, level=3]
Rule 30    expr -> expr LE expr LE expr  [precedence=right, level=3]
Rule 31    expr -> expr < expr  [precedence=right, level=3]
Rule 32    expr -> ~ expr  [precedence=left, level=7]
Rule 33    expr -> expr / expr  [precedence=left, level=5]
Rule 34    expr -> expr * expr  [precedence=left, level=5]
Rule 35    expr -> expr - expr  [precedence=left, level=4]
Rule 36    expr -> expr + expr  [precedence=left, level=4]
Rule 37    expr -> ISVOID expr  [precedence=left, level=6]
Rule 38    expr -> NEW TYPEID
Rule 39    expr -> CASE expr OF case_list ESAC
Rule 40    expr -> LET assign_list IN expr
Rule 41    expr -> { expresion_list }
Rule 42    expr -> WHILE expr LOOP expr POOL
Rule 43    expr -> IF expr THEN expr ELSE expr FI
Rule 44    expr -> OBJECTID ( arg_list )
Rule 45    expr -> expr @ TYPEID . OBJECTID ( arg_list )
Rule 46    expr -> expr . OBJECTID ( arg_list )
Rule 47    expr -> expr @ TYPEID . OBJECTID ( )
Rule 48    expr -> expr . OBJECTID ( )
Rule 49    expr -> OBJECTID ( )
Rule 50    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 51    arg_list -> arg_list , expr
Rule 52    arg_list -> expr
Rule 53    expresion_list -> error ;
Rule 54    expresion_list -> expresion_list expr ;
Rule 55    expresion_list -> expr ;
Rule 56    assign_list -> assign_list , OBJECTID : TYPEID ASSIGN error
Rule 57    assign_list -> OBJECTID : TYPEID ASSIGN error
Rule 58    assign_list -> assign_list , OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 59    assign_list -> assign_list , OBJECTID : TYPEID
Rule 60    assign_list -> OBJECTID : TYPEID
Rule 61    assign_list -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 62    case_list -> case_list OBJECTID : TYPEID DARROW expr ;
Rule 63    case_list -> OBJECTID : TYPEID DARROW expr ;

Unused terminals:

    NUMBER

Terminals, with rules where they appear:

(                    : 11 14 15 25 44 45 46 47 48 49
)                    : 11 14 15 25 44 45 46 47 48 49
*                    : 34
+                    : 36
,                    : 17 51 56 58 59
-                    : 35
.                    : 45 46 47 48
/                    : 33
:                    : 11 12 13 14 15 19 56 57 58 59 60 61 62 63
;                    : 2 3 8 9 10 53 54 55 62 63
<                    : 31
=                    : 27 28 28
@                    : 45 47
ASSIGN               : 13 50 56 57 58 61
BOOL_CONST           : 21
CASE                 : 20 39
CLASS                : 4 5 6 7
DARROW               : 62 63
ELSE                 : 43
ESAC                 : 20 39
FI                   : 43
IF                   : 43
IN                   : 40
INHERITS             : 4 5
INT_CONST            : 23
ISVOID               : 37
LE                   : 29 30 30
LET                  : 40
LOOP                 : 42
NEW                  : 38
NOT                  : 26
NUMBER               : 
OBJECTID             : 11 12 13 14 15 19 24 44 45 46 47 48 49 50 56 57 58 59 60 61 62 63
OF                   : 20 39
POOL                 : 42
STR_CONST            : 22
THEN                 : 43
TYPEID               : 4 4 5 5 6 7 11 12 13 14 15 19 38 45 47 56 57 58 59 60 61 62 63
WHILE                : 42
error                : 8 11 16 20 53 56 57
{                    : 4 5 6 7 11 14 15 41
}                    : 4 5 6 7 11 14 15 41
~                    : 32

Nonterminals, with rules where they appear:

arg_list             : 44 45 46 51
assign_list          : 40 56 58 59
case_list            : 20 39 62
clas                 : 2 3
class_list           : 1 3
expr                 : 13 14 15 25 26 27 27 28 28 28 29 29 30 30 30 31 31 32 33 33 34 34 35 35 36 36 37 39 40 42 42 43 43 43 45 46 47 48 50 51 52 54 55 58 61 62 63
expresion_list       : 41 54
feature              : 9 10
feature_list         : 5 7 9
formal               : 16 17 18
formal_list          : 14 16 17
program              : 0


state 0

    (0) S' -> . program
    (1) program -> . class_list
    (2) class_list -> . clas ;
    (3) class_list -> . class_list clas ;
    (4) clas -> . CLASS TYPEID INHERITS TYPEID { }
    (5) clas -> . CLASS TYPEID INHERITS TYPEID { feature_list }
    (6) clas -> . CLASS TYPEID { }
    (7) clas -> . CLASS TYPEID { feature_list }
    CLASS           shift and go to state 4

    program                        shift and go to state 1
    class_list                     shift and go to state 2
    clas                           shift and go to state 3

state 1

    (0) S' -> program .


state 2

    (1) program -> class_list .
    (3) class_list -> class_list . clas ;
    (4) clas -> . CLASS TYPEID INHERITS TYPEID { }
    (5) clas -> . CLASS TYPEID INHERITS TYPEID { feature_list }
    (6) clas -> . CLASS TYPEID { }
    (7) clas -> . CLASS TYPEID { feature_list }
    $end            reduce using rule 1 (program -> class_list .)
    CLASS           shift and go to state 4

    clas                           shift and go to state 5

state 3

    (2) class_list -> clas . ;
    ;               shift and go to state 6


state 4

    (4) clas -> CLASS . TYPEID INHERITS TYPEID { }
    (5) clas -> CLASS . TYPEID INHERITS TYPEID { feature_list }
    (6) clas -> CLASS . TYPEID { }
    (7) clas -> CLASS . TYPEID { feature_list }
    TYPEID          shift and go to state 7


state 5

    (3) class_list -> class_list clas . ;
    ;               shift and go to state 8


state 6

    (2) class_list -> clas ; .
    CLASS           reduce using rule 2 (class_list -> clas ; .)
    $end            reduce using rule 2 (class_list -> clas ; .)


state 7

    (4) clas -> CLASS TYPEID . INHERITS TYPEID { }
    (5) clas -> CLASS TYPEID . INHERITS TYPEID { feature_list }
    (6) clas -> CLASS TYPEID . { }
    (7) clas -> CLASS TYPEID . { feature_list }
    INHERITS        shift and go to state 9
    {               shift and go to state 10


state 8

    (3) class_list -> class_list clas ; .
    CLASS           reduce using rule 3 (class_list -> class_list clas ; .)
    $end            reduce using rule 3 (class_list -> class_list clas ; .)


state 9

    (4) clas -> CLASS TYPEID INHERITS . TYPEID { }
    (5) clas -> CLASS TYPEID INHERITS . TYPEID { feature_list }
    TYPEID          shift and go to state 11


state 10

    (6) clas -> CLASS TYPEID { . }
    (7) clas -> CLASS TYPEID { . feature_list }
    (8) feature_list -> . error ;
    (9) feature_list -> . feature_list feature ;
    (10) feature_list -> . feature ;
    (11) feature -> . OBJECTID ( ) : TYPEID { error }
    (12) feature -> . OBJECTID : TYPEID
    (13) feature -> . OBJECTID : TYPEID ASSIGN expr
    (14) feature -> . OBJECTID ( formal_list ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( ) : TYPEID { expr }
    }               shift and go to state 12
    error           shift and go to state 14
    OBJECTID        shift and go to state 16

    feature_list                   shift and go to state 13
    feature                        shift and go to state 15

state 11

    (4) clas -> CLASS TYPEID INHERITS TYPEID . { }
    (5) clas -> CLASS TYPEID INHERITS TYPEID . { feature_list }
    {               shift and go to state 17


state 12

    (6) clas -> CLASS TYPEID { } .
    ;               reduce using rule 6 (clas -> CLASS TYPEID { } .)


state 13

    (7) clas -> CLASS TYPEID { feature_list . }
    (9) feature_list -> feature_list . feature ;
    (11) feature -> . OBJECTID ( ) : TYPEID { error }
    (12) feature -> . OBJECTID : TYPEID
    (13) feature -> . OBJECTID : TYPEID ASSIGN expr
    (14) feature -> . OBJECTID ( formal_list ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( ) : TYPEID { expr }
    }               shift and go to state 18
    OBJECTID        shift and go to state 16

    feature                        shift and go to state 19

state 14

    (8) feature_list -> error . ;
    ;               shift and go to state 20


state 15

    (10) feature_list -> feature . ;
    ;               shift and go to state 21


state 16

    (11) feature -> OBJECTID . ( ) : TYPEID { error }
    (12) feature -> OBJECTID . : TYPEID
    (13) feature -> OBJECTID . : TYPEID ASSIGN expr
    (14) feature -> OBJECTID . ( formal_list ) : TYPEID { expr }
    (15) feature -> OBJECTID . ( ) : TYPEID { expr }
    (               shift and go to state 22
    :               shift and go to state 23


state 17

    (4) clas -> CLASS TYPEID INHERITS TYPEID { . }
    (5) clas -> CLASS TYPEID INHERITS TYPEID { . feature_list }
    (8) feature_list -> . error ;
    (9) feature_list -> . feature_list feature ;
    (10) feature_list -> . feature ;
    (11) feature -> . OBJECTID ( ) : TYPEID { error }
    (12) feature -> . OBJECTID : TYPEID
    (13) feature -> . OBJECTID : TYPEID ASSIGN expr
    (14) feature -> . OBJECTID ( formal_list ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( ) : TYPEID { expr }
    }               shift and go to state 24
    error           shift and go to state 14
    OBJECTID        shift and go to state 16

    feature_list                   shift and go to state 25
    feature                        shift and go to state 15

state 18

    (7) clas -> CLASS TYPEID { feature_list } .
    ;               reduce using rule 7 (clas -> CLASS TYPEID { feature_list } .)


state 19

    (9) feature_list -> feature_list feature . ;
    ;               shift and go to state 26


state 20

    (8) feature_list -> error ; .
    }               reduce using rule 8 (feature_list -> error ; .)
    OBJECTID        reduce using rule 8 (feature_list -> error ; .)


state 21

    (10) feature_list -> feature ; .
    }               reduce using rule 10 (feature_list -> feature ; .)
    OBJECTID        reduce using rule 10 (feature_list -> feature ; .)


state 22

    (11) feature -> OBJECTID ( . ) : TYPEID { error }
    (14) feature -> OBJECTID ( . formal_list ) : TYPEID { expr }
    (15) feature -> OBJECTID ( . ) : TYPEID { expr }
    (16) formal_list -> . formal_list error formal
    (17) formal_list -> . formal_list , formal
    (18) formal_list -> . formal
    (19) formal -> . OBJECTID : TYPEID
    )               shift and go to state 28
    OBJECTID        shift and go to state 27

    formal_list                    shift and go to state 29
    formal                         shift and go to state 30

state 23

    (12) feature -> OBJECTID : . TYPEID
    (13) feature -> OBJECTID : . TYPEID ASSIGN expr
    TYPEID          shift and go to state 31


state 24

    (4) clas -> CLASS TYPEID INHERITS TYPEID { } .
    ;               reduce using rule 4 (clas -> CLASS TYPEID INHERITS TYPEID { } .)


state 25

    (5) clas -> CLASS TYPEID INHERITS TYPEID { feature_list . }
    (9) feature_list -> feature_list . feature ;
    (11) feature -> . OBJECTID ( ) : TYPEID { error }
    (12) feature -> . OBJECTID : TYPEID
    (13) feature -> . OBJECTID : TYPEID ASSIGN expr
    (14) feature -> . OBJECTID ( formal_list ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( ) : TYPEID { expr }
    }               shift and go to state 32
    OBJECTID        shift and go to state 16

    feature                        shift and go to state 19

state 26

    (9) feature_list -> feature_list feature ; .
    }               reduce using rule 9 (feature_list -> feature_list feature ; .)
    OBJECTID        reduce using rule 9 (feature_list -> feature_list feature ; .)


state 27

    (19) formal -> OBJECTID . : TYPEID
    :               shift and go to state 33


state 28

    (11) feature -> OBJECTID ( ) . : TYPEID { error }
    (15) feature -> OBJECTID ( ) . : TYPEID { expr }
    :               shift and go to state 34


state 29

    (14) feature -> OBJECTID ( formal_list . ) : TYPEID { expr }
    (16) formal_list -> formal_list . error formal
    (17) formal_list -> formal_list . , formal
    )               shift and go to state 35
    error           shift and go to state 36
    ,               shift and go to state 37


state 30

    (18) formal_list -> formal .
    )               reduce using rule 18 (formal_list -> formal .)
    error           reduce using rule 18 (formal_list -> formal .)
    ,               reduce using rule 18 (formal_list -> formal .)


state 31

    (12) feature -> OBJECTID : TYPEID .
    (13) feature -> OBJECTID : TYPEID . ASSIGN expr
    ;               reduce using rule 12 (feature -> OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 38


state 32

    (5) clas -> CLASS TYPEID INHERITS TYPEID { feature_list } .
    ;               reduce using rule 5 (clas -> CLASS TYPEID INHERITS TYPEID { feature_list } .)


state 33

    (19) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 39


state 34

    (11) feature -> OBJECTID ( ) : . TYPEID { error }
    (15) feature -> OBJECTID ( ) : . TYPEID { expr }
    TYPEID          shift and go to state 40


state 35

    (14) feature -> OBJECTID ( formal_list ) . : TYPEID { expr }
    :               shift and go to state 41


state 36

    (16) formal_list -> formal_list error . formal
    (19) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 27

    formal                         shift and go to state 42

state 37

    (17) formal_list -> formal_list , . formal
    (19) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 27

    formal                         shift and go to state 43

state 38

    (13) feature -> OBJECTID : TYPEID ASSIGN . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 45

state 39

    (19) formal -> OBJECTID : TYPEID .
    )               reduce using rule 19 (formal -> OBJECTID : TYPEID .)
    error           reduce using rule 19 (formal -> OBJECTID : TYPEID .)
    ,               reduce using rule 19 (formal -> OBJECTID : TYPEID .)


state 40

    (11) feature -> OBJECTID ( ) : TYPEID . { error }
    (15) feature -> OBJECTID ( ) : TYPEID . { expr }
    {               shift and go to state 59


state 41

    (14) feature -> OBJECTID ( formal_list ) : . TYPEID { expr }
    TYPEID          shift and go to state 60


state 42

    (16) formal_list -> formal_list error formal .
    )               reduce using rule 16 (formal_list -> formal_list error formal .)
    error           reduce using rule 16 (formal_list -> formal_list error formal .)
    ,               reduce using rule 16 (formal_list -> formal_list error formal .)


state 43

    (17) formal_list -> formal_list , formal .
    )               reduce using rule 17 (formal_list -> formal_list , formal .)
    error           reduce using rule 17 (formal_list -> formal_list , formal .)
    ,               reduce using rule 17 (formal_list -> formal_list , formal .)


state 44

    (24) expr -> OBJECTID .
    (44) expr -> OBJECTID . ( arg_list )
    (49) expr -> OBJECTID . ( )
    (50) expr -> OBJECTID . ASSIGN expr
    =               reduce using rule 24 (expr -> OBJECTID .)
    LE              reduce using rule 24 (expr -> OBJECTID .)
    <               reduce using rule 24 (expr -> OBJECTID .)
    /               reduce using rule 24 (expr -> OBJECTID .)
    *               reduce using rule 24 (expr -> OBJECTID .)
    -               reduce using rule 24 (expr -> OBJECTID .)
    +               reduce using rule 24 (expr -> OBJECTID .)
    @               reduce using rule 24 (expr -> OBJECTID .)
    .               reduce using rule 24 (expr -> OBJECTID .)
    ;               reduce using rule 24 (expr -> OBJECTID .)
    OF              reduce using rule 24 (expr -> OBJECTID .)
    )               reduce using rule 24 (expr -> OBJECTID .)
    LOOP            reduce using rule 24 (expr -> OBJECTID .)
    THEN            reduce using rule 24 (expr -> OBJECTID .)
    }               reduce using rule 24 (expr -> OBJECTID .)
    ,               reduce using rule 24 (expr -> OBJECTID .)
    POOL            reduce using rule 24 (expr -> OBJECTID .)
    ELSE            reduce using rule 24 (expr -> OBJECTID .)
    IN              reduce using rule 24 (expr -> OBJECTID .)
    FI              reduce using rule 24 (expr -> OBJECTID .)
    (               shift and go to state 61
    ASSIGN          shift and go to state 62


state 45

    (13) feature -> OBJECTID : TYPEID ASSIGN expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               reduce using rule 13 (feature -> OBJECTID : TYPEID ASSIGN expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 46

    (20) expr -> CASE . error OF case_list ESAC
    (39) expr -> CASE . expr OF case_list ESAC
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    error           shift and go to state 72
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 73

state 47

    (21) expr -> BOOL_CONST .
    =               reduce using rule 21 (expr -> BOOL_CONST .)
    LE              reduce using rule 21 (expr -> BOOL_CONST .)
    <               reduce using rule 21 (expr -> BOOL_CONST .)
    /               reduce using rule 21 (expr -> BOOL_CONST .)
    *               reduce using rule 21 (expr -> BOOL_CONST .)
    -               reduce using rule 21 (expr -> BOOL_CONST .)
    +               reduce using rule 21 (expr -> BOOL_CONST .)
    @               reduce using rule 21 (expr -> BOOL_CONST .)
    .               reduce using rule 21 (expr -> BOOL_CONST .)
    ;               reduce using rule 21 (expr -> BOOL_CONST .)
    OF              reduce using rule 21 (expr -> BOOL_CONST .)
    )               reduce using rule 21 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 21 (expr -> BOOL_CONST .)
    THEN            reduce using rule 21 (expr -> BOOL_CONST .)
    }               reduce using rule 21 (expr -> BOOL_CONST .)
    ,               reduce using rule 21 (expr -> BOOL_CONST .)
    POOL            reduce using rule 21 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 21 (expr -> BOOL_CONST .)
    IN              reduce using rule 21 (expr -> BOOL_CONST .)
    FI              reduce using rule 21 (expr -> BOOL_CONST .)


state 48

    (22) expr -> STR_CONST .
    =               reduce using rule 22 (expr -> STR_CONST .)
    LE              reduce using rule 22 (expr -> STR_CONST .)
    <               reduce using rule 22 (expr -> STR_CONST .)
    /               reduce using rule 22 (expr -> STR_CONST .)
    *               reduce using rule 22 (expr -> STR_CONST .)
    -               reduce using rule 22 (expr -> STR_CONST .)
    +               reduce using rule 22 (expr -> STR_CONST .)
    @               reduce using rule 22 (expr -> STR_CONST .)
    .               reduce using rule 22 (expr -> STR_CONST .)
    ;               reduce using rule 22 (expr -> STR_CONST .)
    OF              reduce using rule 22 (expr -> STR_CONST .)
    )               reduce using rule 22 (expr -> STR_CONST .)
    LOOP            reduce using rule 22 (expr -> STR_CONST .)
    THEN            reduce using rule 22 (expr -> STR_CONST .)
    }               reduce using rule 22 (expr -> STR_CONST .)
    ,               reduce using rule 22 (expr -> STR_CONST .)
    POOL            reduce using rule 22 (expr -> STR_CONST .)
    ELSE            reduce using rule 22 (expr -> STR_CONST .)
    IN              reduce using rule 22 (expr -> STR_CONST .)
    FI              reduce using rule 22 (expr -> STR_CONST .)


state 49

    (23) expr -> INT_CONST .
    =               reduce using rule 23 (expr -> INT_CONST .)
    LE              reduce using rule 23 (expr -> INT_CONST .)
    <               reduce using rule 23 (expr -> INT_CONST .)
    /               reduce using rule 23 (expr -> INT_CONST .)
    *               reduce using rule 23 (expr -> INT_CONST .)
    -               reduce using rule 23 (expr -> INT_CONST .)
    +               reduce using rule 23 (expr -> INT_CONST .)
    @               reduce using rule 23 (expr -> INT_CONST .)
    .               reduce using rule 23 (expr -> INT_CONST .)
    ;               reduce using rule 23 (expr -> INT_CONST .)
    OF              reduce using rule 23 (expr -> INT_CONST .)
    )               reduce using rule 23 (expr -> INT_CONST .)
    LOOP            reduce using rule 23 (expr -> INT_CONST .)
    THEN            reduce using rule 23 (expr -> INT_CONST .)
    }               reduce using rule 23 (expr -> INT_CONST .)
    ,               reduce using rule 23 (expr -> INT_CONST .)
    POOL            reduce using rule 23 (expr -> INT_CONST .)
    ELSE            reduce using rule 23 (expr -> INT_CONST .)
    IN              reduce using rule 23 (expr -> INT_CONST .)
    FI              reduce using rule 23 (expr -> INT_CONST .)


state 50

    (25) expr -> ( . expr )
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 74

state 51

    (26) expr -> NOT . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 75

state 52

    (32) expr -> ~ . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 76

state 53

    (37) expr -> ISVOID . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 77

state 54

    (38) expr -> NEW . TYPEID
    TYPEID          shift and go to state 78


state 55

    (40) expr -> LET . assign_list IN expr
    (56) assign_list -> . assign_list , OBJECTID : TYPEID ASSIGN error
    (57) assign_list -> . OBJECTID : TYPEID ASSIGN error
    (58) assign_list -> . assign_list , OBJECTID : TYPEID ASSIGN expr
    (59) assign_list -> . assign_list , OBJECTID : TYPEID
    (60) assign_list -> . OBJECTID : TYPEID
    (61) assign_list -> . OBJECTID : TYPEID ASSIGN expr
    OBJECTID        shift and go to state 80

    assign_list                    shift and go to state 79

state 56

    (41) expr -> { . expresion_list }
    (53) expresion_list -> . error ;
    (54) expresion_list -> . expresion_list expr ;
    (55) expresion_list -> . expr ;
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    error           shift and go to state 82
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expresion_list                 shift and go to state 81
    expr                           shift and go to state 83

state 57

    (42) expr -> WHILE . expr LOOP expr POOL
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 84

state 58

    (43) expr -> IF . expr THEN expr ELSE expr FI
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 85

state 59

    (11) feature -> OBJECTID ( ) : TYPEID { . error }
    (15) feature -> OBJECTID ( ) : TYPEID { . expr }
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    error           shift and go to state 86
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 87

state 60

    (14) feature -> OBJECTID ( formal_list ) : TYPEID . { expr }
    {               shift and go to state 88


state 61

    (44) expr -> OBJECTID ( . arg_list )
    (49) expr -> OBJECTID ( . )
    (51) arg_list -> . arg_list , expr
    (52) arg_list -> . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 90
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    arg_list                       shift and go to state 89
    expr                           shift and go to state 91

state 62

    (50) expr -> OBJECTID ASSIGN . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 92

state 63

    (27) expr -> expr = . expr
    (28) expr -> expr = . expr = expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 93

state 64

    (29) expr -> expr LE . expr
    (30) expr -> expr LE . expr LE expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 94

state 65

    (31) expr -> expr < . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 95

state 66

    (33) expr -> expr / . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 96

state 67

    (34) expr -> expr * . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 97

state 68

    (35) expr -> expr - . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 98

state 69

    (36) expr -> expr + . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 99

state 70

    (45) expr -> expr @ . TYPEID . OBJECTID ( arg_list )
    (47) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 100


state 71

    (46) expr -> expr . . OBJECTID ( arg_list )
    (48) expr -> expr . . OBJECTID ( )
    OBJECTID        shift and go to state 101


state 72

    (20) expr -> CASE error . OF case_list ESAC
    OF              shift and go to state 102


state 73

    (39) expr -> CASE expr . OF case_list ESAC
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    OF              shift and go to state 103
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 74

    (25) expr -> ( expr . )
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    )               shift and go to state 104
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 75

    (26) expr -> NOT expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               reduce using rule 26 (expr -> NOT expr .)
    OF              reduce using rule 26 (expr -> NOT expr .)
    )               reduce using rule 26 (expr -> NOT expr .)
    LOOP            reduce using rule 26 (expr -> NOT expr .)
    THEN            reduce using rule 26 (expr -> NOT expr .)
    }               reduce using rule 26 (expr -> NOT expr .)
    ,               reduce using rule 26 (expr -> NOT expr .)
    POOL            reduce using rule 26 (expr -> NOT expr .)
    ELSE            reduce using rule 26 (expr -> NOT expr .)
    IN              reduce using rule 26 (expr -> NOT expr .)
    FI              reduce using rule 26 (expr -> NOT expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 76

    (32) expr -> ~ expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    =               reduce using rule 32 (expr -> ~ expr .)
    LE              reduce using rule 32 (expr -> ~ expr .)
    <               reduce using rule 32 (expr -> ~ expr .)
    /               reduce using rule 32 (expr -> ~ expr .)
    *               reduce using rule 32 (expr -> ~ expr .)
    -               reduce using rule 32 (expr -> ~ expr .)
    +               reduce using rule 32 (expr -> ~ expr .)
    ;               reduce using rule 32 (expr -> ~ expr .)
    OF              reduce using rule 32 (expr -> ~ expr .)
    )               reduce using rule 32 (expr -> ~ expr .)
    LOOP            reduce using rule 32 (expr -> ~ expr .)
    THEN            reduce using rule 32 (expr -> ~ expr .)
    }               reduce using rule 32 (expr -> ~ expr .)
    ,               reduce using rule 32 (expr -> ~ expr .)
    POOL            reduce using rule 32 (expr -> ~ expr .)
    ELSE            reduce using rule 32 (expr -> ~ expr .)
    IN              reduce using rule 32 (expr -> ~ expr .)
    FI              reduce using rule 32 (expr -> ~ expr .)
    @               shift and go to state 70
    .               shift and go to state 71


state 77

    (37) expr -> ISVOID expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    =               reduce using rule 37 (expr -> ISVOID expr .)
    LE              reduce using rule 37 (expr -> ISVOID expr .)
    <               reduce using rule 37 (expr -> ISVOID expr .)
    /               reduce using rule 37 (expr -> ISVOID expr .)
    *               reduce using rule 37 (expr -> ISVOID expr .)
    -               reduce using rule 37 (expr -> ISVOID expr .)
    +               reduce using rule 37 (expr -> ISVOID expr .)
    ;               reduce using rule 37 (expr -> ISVOID expr .)
    OF              reduce using rule 37 (expr -> ISVOID expr .)
    )               reduce using rule 37 (expr -> ISVOID expr .)
    LOOP            reduce using rule 37 (expr -> ISVOID expr .)
    THEN            reduce using rule 37 (expr -> ISVOID expr .)
    }               reduce using rule 37 (expr -> ISVOID expr .)
    ,               reduce using rule 37 (expr -> ISVOID expr .)
    POOL            reduce using rule 37 (expr -> ISVOID expr .)
    ELSE            reduce using rule 37 (expr -> ISVOID expr .)
    IN              reduce using rule 37 (expr -> ISVOID expr .)
    FI              reduce using rule 37 (expr -> ISVOID expr .)
    @               shift and go to state 70
    .               shift and go to state 71


state 78

    (38) expr -> NEW TYPEID .
    =               reduce using rule 38 (expr -> NEW TYPEID .)
    LE              reduce using rule 38 (expr -> NEW TYPEID .)
    <               reduce using rule 38 (expr -> NEW TYPEID .)
    /               reduce using rule 38 (expr -> NEW TYPEID .)
    *               reduce using rule 38 (expr -> NEW TYPEID .)
    -               reduce using rule 38 (expr -> NEW TYPEID .)
    +               reduce using rule 38 (expr -> NEW TYPEID .)
    @               reduce using rule 38 (expr -> NEW TYPEID .)
    .               reduce using rule 38 (expr -> NEW TYPEID .)
    ;               reduce using rule 38 (expr -> NEW TYPEID .)
    OF              reduce using rule 38 (expr -> NEW TYPEID .)
    )               reduce using rule 38 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 38 (expr -> NEW TYPEID .)
    THEN            reduce using rule 38 (expr -> NEW TYPEID .)
    }               reduce using rule 38 (expr -> NEW TYPEID .)
    ,               reduce using rule 38 (expr -> NEW TYPEID .)
    POOL            reduce using rule 38 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 38 (expr -> NEW TYPEID .)
    IN              reduce using rule 38 (expr -> NEW TYPEID .)
    FI              reduce using rule 38 (expr -> NEW TYPEID .)


state 79

    (40) expr -> LET assign_list . IN expr
    (56) assign_list -> assign_list . , OBJECTID : TYPEID ASSIGN error
    (58) assign_list -> assign_list . , OBJECTID : TYPEID ASSIGN expr
    (59) assign_list -> assign_list . , OBJECTID : TYPEID
    IN              shift and go to state 105
    ,               shift and go to state 106


state 80

    (57) assign_list -> OBJECTID . : TYPEID ASSIGN error
    (60) assign_list -> OBJECTID . : TYPEID
    (61) assign_list -> OBJECTID . : TYPEID ASSIGN expr
    :               shift and go to state 107


state 81

    (41) expr -> { expresion_list . }
    (54) expresion_list -> expresion_list . expr ;
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    }               shift and go to state 108
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 109

state 82

    (53) expresion_list -> error . ;
    ;               shift and go to state 110


state 83

    (55) expresion_list -> expr . ;
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               shift and go to state 111
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 84

    (42) expr -> WHILE expr . LOOP expr POOL
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    LOOP            shift and go to state 112
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 85

    (43) expr -> IF expr . THEN expr ELSE expr FI
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    THEN            shift and go to state 113
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 86

    (11) feature -> OBJECTID ( ) : TYPEID { error . }
    }               shift and go to state 114


state 87

    (15) feature -> OBJECTID ( ) : TYPEID { expr . }
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    }               shift and go to state 115
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 88

    (14) feature -> OBJECTID ( formal_list ) : TYPEID { . expr }
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 116

state 89

    (44) expr -> OBJECTID ( arg_list . )
    (51) arg_list -> arg_list . , expr
    )               shift and go to state 117
    ,               shift and go to state 118


state 90

    (49) expr -> OBJECTID ( ) .
    =               reduce using rule 49 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 49 (expr -> OBJECTID ( ) .)
    <               reduce using rule 49 (expr -> OBJECTID ( ) .)
    /               reduce using rule 49 (expr -> OBJECTID ( ) .)
    *               reduce using rule 49 (expr -> OBJECTID ( ) .)
    -               reduce using rule 49 (expr -> OBJECTID ( ) .)
    +               reduce using rule 49 (expr -> OBJECTID ( ) .)
    @               reduce using rule 49 (expr -> OBJECTID ( ) .)
    .               reduce using rule 49 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 49 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 49 (expr -> OBJECTID ( ) .)
    )               reduce using rule 49 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 49 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 49 (expr -> OBJECTID ( ) .)
    }               reduce using rule 49 (expr -> OBJECTID ( ) .)
    ,               reduce using rule 49 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 49 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 49 (expr -> OBJECTID ( ) .)
    IN              reduce using rule 49 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 49 (expr -> OBJECTID ( ) .)


state 91

    (52) arg_list -> expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    )               reduce using rule 52 (arg_list -> expr .)
    ,               reduce using rule 52 (arg_list -> expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 92

    (50) expr -> OBJECTID ASSIGN expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    ,               reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    IN              reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 50 (expr -> OBJECTID ASSIGN expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 93

    (27) expr -> expr = expr .
    (28) expr -> expr = expr . = expr
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               reduce using rule 27 (expr -> expr = expr .)
    OF              reduce using rule 27 (expr -> expr = expr .)
    )               reduce using rule 27 (expr -> expr = expr .)
    LOOP            reduce using rule 27 (expr -> expr = expr .)
    THEN            reduce using rule 27 (expr -> expr = expr .)
    }               reduce using rule 27 (expr -> expr = expr .)
    ,               reduce using rule 27 (expr -> expr = expr .)
    POOL            reduce using rule 27 (expr -> expr = expr .)
    ELSE            reduce using rule 27 (expr -> expr = expr .)
    IN              reduce using rule 27 (expr -> expr = expr .)
    FI              reduce using rule 27 (expr -> expr = expr .)
    =               shift and go to state 119
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 94

    (29) expr -> expr LE expr .
    (30) expr -> expr LE expr . LE expr
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               reduce using rule 29 (expr -> expr LE expr .)
    OF              reduce using rule 29 (expr -> expr LE expr .)
    )               reduce using rule 29 (expr -> expr LE expr .)
    LOOP            reduce using rule 29 (expr -> expr LE expr .)
    THEN            reduce using rule 29 (expr -> expr LE expr .)
    }               reduce using rule 29 (expr -> expr LE expr .)
    ,               reduce using rule 29 (expr -> expr LE expr .)
    POOL            reduce using rule 29 (expr -> expr LE expr .)
    ELSE            reduce using rule 29 (expr -> expr LE expr .)
    IN              reduce using rule 29 (expr -> expr LE expr .)
    FI              reduce using rule 29 (expr -> expr LE expr .)
    LE              shift and go to state 120
    =               shift and go to state 63
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 95

    (31) expr -> expr < expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               reduce using rule 31 (expr -> expr < expr .)
    OF              reduce using rule 31 (expr -> expr < expr .)
    )               reduce using rule 31 (expr -> expr < expr .)
    LOOP            reduce using rule 31 (expr -> expr < expr .)
    THEN            reduce using rule 31 (expr -> expr < expr .)
    }               reduce using rule 31 (expr -> expr < expr .)
    ,               reduce using rule 31 (expr -> expr < expr .)
    POOL            reduce using rule 31 (expr -> expr < expr .)
    ELSE            reduce using rule 31 (expr -> expr < expr .)
    IN              reduce using rule 31 (expr -> expr < expr .)
    FI              reduce using rule 31 (expr -> expr < expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 96

    (33) expr -> expr / expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    =               reduce using rule 33 (expr -> expr / expr .)
    LE              reduce using rule 33 (expr -> expr / expr .)
    <               reduce using rule 33 (expr -> expr / expr .)
    /               reduce using rule 33 (expr -> expr / expr .)
    *               reduce using rule 33 (expr -> expr / expr .)
    -               reduce using rule 33 (expr -> expr / expr .)
    +               reduce using rule 33 (expr -> expr / expr .)
    ;               reduce using rule 33 (expr -> expr / expr .)
    OF              reduce using rule 33 (expr -> expr / expr .)
    )               reduce using rule 33 (expr -> expr / expr .)
    LOOP            reduce using rule 33 (expr -> expr / expr .)
    THEN            reduce using rule 33 (expr -> expr / expr .)
    }               reduce using rule 33 (expr -> expr / expr .)
    ,               reduce using rule 33 (expr -> expr / expr .)
    POOL            reduce using rule 33 (expr -> expr / expr .)
    ELSE            reduce using rule 33 (expr -> expr / expr .)
    IN              reduce using rule 33 (expr -> expr / expr .)
    FI              reduce using rule 33 (expr -> expr / expr .)
    @               shift and go to state 70
    .               shift and go to state 71


state 97

    (34) expr -> expr * expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    =               reduce using rule 34 (expr -> expr * expr .)
    LE              reduce using rule 34 (expr -> expr * expr .)
    <               reduce using rule 34 (expr -> expr * expr .)
    /               reduce using rule 34 (expr -> expr * expr .)
    *               reduce using rule 34 (expr -> expr * expr .)
    -               reduce using rule 34 (expr -> expr * expr .)
    +               reduce using rule 34 (expr -> expr * expr .)
    ;               reduce using rule 34 (expr -> expr * expr .)
    OF              reduce using rule 34 (expr -> expr * expr .)
    )               reduce using rule 34 (expr -> expr * expr .)
    LOOP            reduce using rule 34 (expr -> expr * expr .)
    THEN            reduce using rule 34 (expr -> expr * expr .)
    }               reduce using rule 34 (expr -> expr * expr .)
    ,               reduce using rule 34 (expr -> expr * expr .)
    POOL            reduce using rule 34 (expr -> expr * expr .)
    ELSE            reduce using rule 34 (expr -> expr * expr .)
    IN              reduce using rule 34 (expr -> expr * expr .)
    FI              reduce using rule 34 (expr -> expr * expr .)
    @               shift and go to state 70
    .               shift and go to state 71


state 98

    (35) expr -> expr - expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    =               reduce using rule 35 (expr -> expr - expr .)
    LE              reduce using rule 35 (expr -> expr - expr .)
    <               reduce using rule 35 (expr -> expr - expr .)
    -               reduce using rule 35 (expr -> expr - expr .)
    +               reduce using rule 35 (expr -> expr - expr .)
    ;               reduce using rule 35 (expr -> expr - expr .)
    OF              reduce using rule 35 (expr -> expr - expr .)
    )               reduce using rule 35 (expr -> expr - expr .)
    LOOP            reduce using rule 35 (expr -> expr - expr .)
    THEN            reduce using rule 35 (expr -> expr - expr .)
    }               reduce using rule 35 (expr -> expr - expr .)
    ,               reduce using rule 35 (expr -> expr - expr .)
    POOL            reduce using rule 35 (expr -> expr - expr .)
    ELSE            reduce using rule 35 (expr -> expr - expr .)
    IN              reduce using rule 35 (expr -> expr - expr .)
    FI              reduce using rule 35 (expr -> expr - expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    @               shift and go to state 70
    .               shift and go to state 71


state 99

    (36) expr -> expr + expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    =               reduce using rule 36 (expr -> expr + expr .)
    LE              reduce using rule 36 (expr -> expr + expr .)
    <               reduce using rule 36 (expr -> expr + expr .)
    -               reduce using rule 36 (expr -> expr + expr .)
    +               reduce using rule 36 (expr -> expr + expr .)
    ;               reduce using rule 36 (expr -> expr + expr .)
    OF              reduce using rule 36 (expr -> expr + expr .)
    )               reduce using rule 36 (expr -> expr + expr .)
    LOOP            reduce using rule 36 (expr -> expr + expr .)
    THEN            reduce using rule 36 (expr -> expr + expr .)
    }               reduce using rule 36 (expr -> expr + expr .)
    ,               reduce using rule 36 (expr -> expr + expr .)
    POOL            reduce using rule 36 (expr -> expr + expr .)
    ELSE            reduce using rule 36 (expr -> expr + expr .)
    IN              reduce using rule 36 (expr -> expr + expr .)
    FI              reduce using rule 36 (expr -> expr + expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    @               shift and go to state 70
    .               shift and go to state 71


state 100

    (45) expr -> expr @ TYPEID . . OBJECTID ( arg_list )
    (47) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 121


state 101

    (46) expr -> expr . OBJECTID . ( arg_list )
    (48) expr -> expr . OBJECTID . ( )
    (               shift and go to state 122


state 102

    (20) expr -> CASE error OF . case_list ESAC
    (62) case_list -> . case_list OBJECTID : TYPEID DARROW expr ;
    (63) case_list -> . OBJECTID : TYPEID DARROW expr ;
    OBJECTID        shift and go to state 124

    case_list                      shift and go to state 123

state 103

    (39) expr -> CASE expr OF . case_list ESAC
    (62) case_list -> . case_list OBJECTID : TYPEID DARROW expr ;
    (63) case_list -> . OBJECTID : TYPEID DARROW expr ;
    OBJECTID        shift and go to state 124

    case_list                      shift and go to state 125

state 104

    (25) expr -> ( expr ) .
    =               reduce using rule 25 (expr -> ( expr ) .)
    LE              reduce using rule 25 (expr -> ( expr ) .)
    <               reduce using rule 25 (expr -> ( expr ) .)
    /               reduce using rule 25 (expr -> ( expr ) .)
    *               reduce using rule 25 (expr -> ( expr ) .)
    -               reduce using rule 25 (expr -> ( expr ) .)
    +               reduce using rule 25 (expr -> ( expr ) .)
    @               reduce using rule 25 (expr -> ( expr ) .)
    .               reduce using rule 25 (expr -> ( expr ) .)
    ;               reduce using rule 25 (expr -> ( expr ) .)
    OF              reduce using rule 25 (expr -> ( expr ) .)
    )               reduce using rule 25 (expr -> ( expr ) .)
    LOOP            reduce using rule 25 (expr -> ( expr ) .)
    THEN            reduce using rule 25 (expr -> ( expr ) .)
    }               reduce using rule 25 (expr -> ( expr ) .)
    ,               reduce using rule 25 (expr -> ( expr ) .)
    POOL            reduce using rule 25 (expr -> ( expr ) .)
    ELSE            reduce using rule 25 (expr -> ( expr ) .)
    IN              reduce using rule 25 (expr -> ( expr ) .)
    FI              reduce using rule 25 (expr -> ( expr ) .)


state 105

    (40) expr -> LET assign_list IN . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 126

state 106

    (56) assign_list -> assign_list , . OBJECTID : TYPEID ASSIGN error
    (58) assign_list -> assign_list , . OBJECTID : TYPEID ASSIGN expr
    (59) assign_list -> assign_list , . OBJECTID : TYPEID
    OBJECTID        shift and go to state 127


state 107

    (57) assign_list -> OBJECTID : . TYPEID ASSIGN error
    (60) assign_list -> OBJECTID : . TYPEID
    (61) assign_list -> OBJECTID : . TYPEID ASSIGN expr
    TYPEID          shift and go to state 128


state 108

    (41) expr -> { expresion_list } .
    =               reduce using rule 41 (expr -> { expresion_list } .)
    LE              reduce using rule 41 (expr -> { expresion_list } .)
    <               reduce using rule 41 (expr -> { expresion_list } .)
    /               reduce using rule 41 (expr -> { expresion_list } .)
    *               reduce using rule 41 (expr -> { expresion_list } .)
    -               reduce using rule 41 (expr -> { expresion_list } .)
    +               reduce using rule 41 (expr -> { expresion_list } .)
    @               reduce using rule 41 (expr -> { expresion_list } .)
    .               reduce using rule 41 (expr -> { expresion_list } .)
    ;               reduce using rule 41 (expr -> { expresion_list } .)
    OF              reduce using rule 41 (expr -> { expresion_list } .)
    )               reduce using rule 41 (expr -> { expresion_list } .)
    LOOP            reduce using rule 41 (expr -> { expresion_list } .)
    THEN            reduce using rule 41 (expr -> { expresion_list } .)
    }               reduce using rule 41 (expr -> { expresion_list } .)
    ,               reduce using rule 41 (expr -> { expresion_list } .)
    POOL            reduce using rule 41 (expr -> { expresion_list } .)
    ELSE            reduce using rule 41 (expr -> { expresion_list } .)
    IN              reduce using rule 41 (expr -> { expresion_list } .)
    FI              reduce using rule 41 (expr -> { expresion_list } .)


state 109

    (54) expresion_list -> expresion_list expr . ;
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               shift and go to state 129
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 110

    (53) expresion_list -> error ; .
    }               reduce using rule 53 (expresion_list -> error ; .)
    CASE            reduce using rule 53 (expresion_list -> error ; .)
    BOOL_CONST      reduce using rule 53 (expresion_list -> error ; .)
    STR_CONST       reduce using rule 53 (expresion_list -> error ; .)
    INT_CONST       reduce using rule 53 (expresion_list -> error ; .)
    OBJECTID        reduce using rule 53 (expresion_list -> error ; .)
    (               reduce using rule 53 (expresion_list -> error ; .)
    NOT             reduce using rule 53 (expresion_list -> error ; .)
    ~               reduce using rule 53 (expresion_list -> error ; .)
    ISVOID          reduce using rule 53 (expresion_list -> error ; .)
    NEW             reduce using rule 53 (expresion_list -> error ; .)
    LET             reduce using rule 53 (expresion_list -> error ; .)
    {               reduce using rule 53 (expresion_list -> error ; .)
    WHILE           reduce using rule 53 (expresion_list -> error ; .)
    IF              reduce using rule 53 (expresion_list -> error ; .)


state 111

    (55) expresion_list -> expr ; .
    }               reduce using rule 55 (expresion_list -> expr ; .)
    CASE            reduce using rule 55 (expresion_list -> expr ; .)
    BOOL_CONST      reduce using rule 55 (expresion_list -> expr ; .)
    STR_CONST       reduce using rule 55 (expresion_list -> expr ; .)
    INT_CONST       reduce using rule 55 (expresion_list -> expr ; .)
    OBJECTID        reduce using rule 55 (expresion_list -> expr ; .)
    (               reduce using rule 55 (expresion_list -> expr ; .)
    NOT             reduce using rule 55 (expresion_list -> expr ; .)
    ~               reduce using rule 55 (expresion_list -> expr ; .)
    ISVOID          reduce using rule 55 (expresion_list -> expr ; .)
    NEW             reduce using rule 55 (expresion_list -> expr ; .)
    LET             reduce using rule 55 (expresion_list -> expr ; .)
    {               reduce using rule 55 (expresion_list -> expr ; .)
    WHILE           reduce using rule 55 (expresion_list -> expr ; .)
    IF              reduce using rule 55 (expresion_list -> expr ; .)


state 112

    (42) expr -> WHILE expr LOOP . expr POOL
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 130

state 113

    (43) expr -> IF expr THEN . expr ELSE expr FI
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 131

state 114

    (11) feature -> OBJECTID ( ) : TYPEID { error } .
    ;               reduce using rule 11 (feature -> OBJECTID ( ) : TYPEID { error } .)


state 115

    (15) feature -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 15 (feature -> OBJECTID ( ) : TYPEID { expr } .)


state 116

    (14) feature -> OBJECTID ( formal_list ) : TYPEID { expr . }
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    }               shift and go to state 132
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 117

    (44) expr -> OBJECTID ( arg_list ) .
    =               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    LE              reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    <               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    /               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    *               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    -               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    +               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    @               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    .               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    ;               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    OF              reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    )               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    LOOP            reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    THEN            reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    }               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    ,               reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    POOL            reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    ELSE            reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    IN              reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)
    FI              reduce using rule 44 (expr -> OBJECTID ( arg_list ) .)


state 118

    (51) arg_list -> arg_list , . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 133

state 119

    (28) expr -> expr = expr = . expr
    (27) expr -> expr = . expr
    (28) expr -> expr = . expr = expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 134

state 120

    (30) expr -> expr LE expr LE . expr
    (29) expr -> expr LE . expr
    (30) expr -> expr LE . expr LE expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 135

state 121

    (45) expr -> expr @ TYPEID . . OBJECTID ( arg_list )
    (47) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 136


state 122

    (46) expr -> expr . OBJECTID ( . arg_list )
    (48) expr -> expr . OBJECTID ( . )
    (51) arg_list -> . arg_list , expr
    (52) arg_list -> . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 138
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 91
    arg_list                       shift and go to state 137

state 123

    (20) expr -> CASE error OF case_list . ESAC
    (62) case_list -> case_list . OBJECTID : TYPEID DARROW expr ;
    ESAC            shift and go to state 139
    OBJECTID        shift and go to state 140


state 124

    (63) case_list -> OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 141


state 125

    (39) expr -> CASE expr OF case_list . ESAC
    (62) case_list -> case_list . OBJECTID : TYPEID DARROW expr ;
    ESAC            shift and go to state 142
    OBJECTID        shift and go to state 140


state 126

    (40) expr -> LET assign_list IN expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    ;               reduce using rule 40 (expr -> LET assign_list IN expr .)
    OF              reduce using rule 40 (expr -> LET assign_list IN expr .)
    )               reduce using rule 40 (expr -> LET assign_list IN expr .)
    LOOP            reduce using rule 40 (expr -> LET assign_list IN expr .)
    THEN            reduce using rule 40 (expr -> LET assign_list IN expr .)
    }               reduce using rule 40 (expr -> LET assign_list IN expr .)
    ,               reduce using rule 40 (expr -> LET assign_list IN expr .)
    POOL            reduce using rule 40 (expr -> LET assign_list IN expr .)
    ELSE            reduce using rule 40 (expr -> LET assign_list IN expr .)
    IN              reduce using rule 40 (expr -> LET assign_list IN expr .)
    FI              reduce using rule 40 (expr -> LET assign_list IN expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 127

    (56) assign_list -> assign_list , OBJECTID . : TYPEID ASSIGN error
    (58) assign_list -> assign_list , OBJECTID . : TYPEID ASSIGN expr
    (59) assign_list -> assign_list , OBJECTID . : TYPEID
    :               shift and go to state 143


state 128

    (57) assign_list -> OBJECTID : TYPEID . ASSIGN error
    (60) assign_list -> OBJECTID : TYPEID .
    (61) assign_list -> OBJECTID : TYPEID . ASSIGN expr
    ASSIGN          shift and go to state 144
    IN              reduce using rule 60 (assign_list -> OBJECTID : TYPEID .)
    ,               reduce using rule 60 (assign_list -> OBJECTID : TYPEID .)


state 129

    (54) expresion_list -> expresion_list expr ; .
    }               reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    CASE            reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    BOOL_CONST      reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    STR_CONST       reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    INT_CONST       reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    OBJECTID        reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    (               reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    NOT             reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    ~               reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    ISVOID          reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    NEW             reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    LET             reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    {               reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    WHILE           reduce using rule 54 (expresion_list -> expresion_list expr ; .)
    IF              reduce using rule 54 (expresion_list -> expresion_list expr ; .)


state 130

    (42) expr -> WHILE expr LOOP expr . POOL
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    POOL            shift and go to state 145
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 131

    (43) expr -> IF expr THEN expr . ELSE expr FI
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ELSE            shift and go to state 146
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 132

    (14) feature -> OBJECTID ( formal_list ) : TYPEID { expr } .
    ;               reduce using rule 14 (feature -> OBJECTID ( formal_list ) : TYPEID { expr } .)


state 133

    (51) arg_list -> arg_list , expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    )               reduce using rule 51 (arg_list -> arg_list , expr .)
    ,               reduce using rule 51 (arg_list -> arg_list , expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 134

    (28) expr -> expr = expr = expr .
    (27) expr -> expr = expr .
    (28) expr -> expr = expr . = expr
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
  ! reduce/reduce conflict for = resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for LE resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for < resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for / resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for * resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for - resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for + resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for @ resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for . resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for ; resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for OF resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for ) resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for LOOP resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for THEN resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for } resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for , resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for POOL resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for ELSE resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for IN resolved using rule 28 (expr -> expr = expr = expr .)
  ! reduce/reduce conflict for FI resolved using rule 28 (expr -> expr = expr = expr .)
    ;               reduce using rule 28 (expr -> expr = expr = expr .)
    OF              reduce using rule 28 (expr -> expr = expr = expr .)
    )               reduce using rule 28 (expr -> expr = expr = expr .)
    LOOP            reduce using rule 28 (expr -> expr = expr = expr .)
    THEN            reduce using rule 28 (expr -> expr = expr = expr .)
    }               reduce using rule 28 (expr -> expr = expr = expr .)
    ,               reduce using rule 28 (expr -> expr = expr = expr .)
    POOL            reduce using rule 28 (expr -> expr = expr = expr .)
    ELSE            reduce using rule 28 (expr -> expr = expr = expr .)
    IN              reduce using rule 28 (expr -> expr = expr = expr .)
    FI              reduce using rule 28 (expr -> expr = expr = expr .)
    =               shift and go to state 119
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 135

    (30) expr -> expr LE expr LE expr .
    (29) expr -> expr LE expr .
    (30) expr -> expr LE expr . LE expr
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
  ! reduce/reduce conflict for = resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for LE resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for < resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for / resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for * resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for - resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for + resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for @ resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for . resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for ; resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for OF resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for ) resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for LOOP resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for THEN resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for } resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for , resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for POOL resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for ELSE resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for IN resolved using rule 30 (expr -> expr LE expr LE expr .)
  ! reduce/reduce conflict for FI resolved using rule 30 (expr -> expr LE expr LE expr .)
    ;               reduce using rule 30 (expr -> expr LE expr LE expr .)
    OF              reduce using rule 30 (expr -> expr LE expr LE expr .)
    )               reduce using rule 30 (expr -> expr LE expr LE expr .)
    LOOP            reduce using rule 30 (expr -> expr LE expr LE expr .)
    THEN            reduce using rule 30 (expr -> expr LE expr LE expr .)
    }               reduce using rule 30 (expr -> expr LE expr LE expr .)
    ,               reduce using rule 30 (expr -> expr LE expr LE expr .)
    POOL            reduce using rule 30 (expr -> expr LE expr LE expr .)
    ELSE            reduce using rule 30 (expr -> expr LE expr LE expr .)
    IN              reduce using rule 30 (expr -> expr LE expr LE expr .)
    FI              reduce using rule 30 (expr -> expr LE expr LE expr .)
    LE              shift and go to state 120
    =               shift and go to state 63
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 136

    (45) expr -> expr @ TYPEID . OBJECTID . ( arg_list )
    (47) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 147


state 137

    (46) expr -> expr . OBJECTID ( arg_list . )
    (51) arg_list -> arg_list . , expr
    )               shift and go to state 148
    ,               shift and go to state 118


state 138

    (48) expr -> expr . OBJECTID ( ) .
    =               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    LE              reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    <               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    /               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    *               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    -               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    +               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    @               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    .               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    ;               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    OF              reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    )               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    LOOP            reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    THEN            reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    }               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    ,               reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    POOL            reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    ELSE            reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    IN              reduce using rule 48 (expr -> expr . OBJECTID ( ) .)
    FI              reduce using rule 48 (expr -> expr . OBJECTID ( ) .)


state 139

    (20) expr -> CASE error OF case_list ESAC .
    =               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    LE              reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    <               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    /               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    *               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    -               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    +               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    @               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    .               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    ;               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    OF              reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    )               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    LOOP            reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    THEN            reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    }               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    ,               reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    POOL            reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    ELSE            reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    IN              reduce using rule 20 (expr -> CASE error OF case_list ESAC .)
    FI              reduce using rule 20 (expr -> CASE error OF case_list ESAC .)


state 140

    (62) case_list -> case_list OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 149


state 141

    (63) case_list -> OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 150


state 142

    (39) expr -> CASE expr OF case_list ESAC .
    =               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    LE              reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    <               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    /               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    *               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    -               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    +               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    @               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    .               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    ;               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    OF              reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    )               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    LOOP            reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    THEN            reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    }               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    ,               reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    POOL            reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    ELSE            reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    IN              reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)
    FI              reduce using rule 39 (expr -> CASE expr OF case_list ESAC .)


state 143

    (56) assign_list -> assign_list , OBJECTID : . TYPEID ASSIGN error
    (58) assign_list -> assign_list , OBJECTID : . TYPEID ASSIGN expr
    (59) assign_list -> assign_list , OBJECTID : . TYPEID
    TYPEID          shift and go to state 151


state 144

    (57) assign_list -> OBJECTID : TYPEID ASSIGN . error
    (61) assign_list -> OBJECTID : TYPEID ASSIGN . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    error           shift and go to state 152
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 153

state 145

    (42) expr -> WHILE expr LOOP expr POOL .
    =               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    @               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    .               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    ,               reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    IN              reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 42 (expr -> WHILE expr LOOP expr POOL .)


state 146

    (43) expr -> IF expr THEN expr ELSE . expr FI
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 154

state 147

    (45) expr -> expr @ TYPEID . OBJECTID ( . arg_list )
    (47) expr -> expr @ TYPEID . OBJECTID ( . )
    (51) arg_list -> . arg_list , expr
    (52) arg_list -> . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    )               shift and go to state 156
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 91
    arg_list                       shift and go to state 155

state 148

    (46) expr -> expr . OBJECTID ( arg_list ) .
    =               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    LE              reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    <               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    /               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    *               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    -               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    +               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    @               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    .               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    ;               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    OF              reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    )               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    LOOP            reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    THEN            reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    }               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    ,               reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    POOL            reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    ELSE            reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    IN              reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)
    FI              reduce using rule 46 (expr -> expr . OBJECTID ( arg_list ) .)


state 149

    (62) case_list -> case_list OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 157


state 150

    (63) case_list -> OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 158


state 151

    (56) assign_list -> assign_list , OBJECTID : TYPEID . ASSIGN error
    (58) assign_list -> assign_list , OBJECTID : TYPEID . ASSIGN expr
    (59) assign_list -> assign_list , OBJECTID : TYPEID .
    ASSIGN          shift and go to state 159
    IN              reduce using rule 59 (assign_list -> assign_list , OBJECTID : TYPEID .)
    ,               reduce using rule 59 (assign_list -> assign_list , OBJECTID : TYPEID .)


state 152

    (57) assign_list -> OBJECTID : TYPEID ASSIGN error .
    IN              reduce using rule 57 (assign_list -> OBJECTID : TYPEID ASSIGN error .)
    ,               reduce using rule 57 (assign_list -> OBJECTID : TYPEID ASSIGN error .)


state 153

    (61) assign_list -> OBJECTID : TYPEID ASSIGN expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    IN              reduce using rule 61 (assign_list -> OBJECTID : TYPEID ASSIGN expr .)
    ,               reduce using rule 61 (assign_list -> OBJECTID : TYPEID ASSIGN expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 154

    (43) expr -> IF expr THEN expr ELSE expr . FI
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    FI              shift and go to state 160
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 155

    (45) expr -> expr @ TYPEID . OBJECTID ( arg_list . )
    (51) arg_list -> arg_list . , expr
    )               shift and go to state 161
    ,               shift and go to state 118


state 156

    (47) expr -> expr @ TYPEID . OBJECTID ( ) .
    =               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    @               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    .               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    IN              reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 47 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 157

    (62) case_list -> case_list OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 162


state 158

    (63) case_list -> OBJECTID : TYPEID DARROW . expr ;
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 163

state 159

    (56) assign_list -> assign_list , OBJECTID : TYPEID ASSIGN . error
    (58) assign_list -> assign_list , OBJECTID : TYPEID ASSIGN . expr
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    error           shift and go to state 164
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 165

state 160

    (43) expr -> IF expr THEN expr ELSE expr FI .
    =               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    @               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    .               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    ,               reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    IN              reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 43 (expr -> IF expr THEN expr ELSE expr FI .)


state 161

    (45) expr -> expr @ TYPEID . OBJECTID ( arg_list ) .
    =               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    LE              reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    <               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    /               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    *               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    -               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    +               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    @               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    .               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    ;               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    OF              reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    )               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    LOOP            reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    THEN            reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    }               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    ,               reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    POOL            reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    ELSE            reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    IN              reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)
    FI              reduce using rule 45 (expr -> expr @ TYPEID . OBJECTID ( arg_list ) .)


state 162

    (62) case_list -> case_list OBJECTID : TYPEID DARROW . expr ;
    (20) expr -> . CASE error OF case_list ESAC
    (21) expr -> . BOOL_CONST
    (22) expr -> . STR_CONST
    (23) expr -> . INT_CONST
    (24) expr -> . OBJECTID
    (25) expr -> . ( expr )
    (26) expr -> . NOT expr
    (27) expr -> . expr = expr
    (28) expr -> . expr = expr = expr
    (29) expr -> . expr LE expr
    (30) expr -> . expr LE expr LE expr
    (31) expr -> . expr < expr
    (32) expr -> . ~ expr
    (33) expr -> . expr / expr
    (34) expr -> . expr * expr
    (35) expr -> . expr - expr
    (36) expr -> . expr + expr
    (37) expr -> . ISVOID expr
    (38) expr -> . NEW TYPEID
    (39) expr -> . CASE expr OF case_list ESAC
    (40) expr -> . LET assign_list IN expr
    (41) expr -> . { expresion_list }
    (42) expr -> . WHILE expr LOOP expr POOL
    (43) expr -> . IF expr THEN expr ELSE expr FI
    (44) expr -> . OBJECTID ( arg_list )
    (45) expr -> . expr @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> . expr . OBJECTID ( arg_list )
    (47) expr -> . expr @ TYPEID . OBJECTID ( )
    (48) expr -> . expr . OBJECTID ( )
    (49) expr -> . OBJECTID ( )
    (50) expr -> . OBJECTID ASSIGN expr
    CASE            shift and go to state 46
    BOOL_CONST      shift and go to state 47
    STR_CONST       shift and go to state 48
    INT_CONST       shift and go to state 49
    OBJECTID        shift and go to state 44
    (               shift and go to state 50
    NOT             shift and go to state 51
    ~               shift and go to state 52
    ISVOID          shift and go to state 53
    NEW             shift and go to state 54
    LET             shift and go to state 55
    {               shift and go to state 56
    WHILE           shift and go to state 57
    IF              shift and go to state 58

    expr                           shift and go to state 166

state 163

    (63) case_list -> OBJECTID : TYPEID DARROW expr . ;
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               shift and go to state 167
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 164

    (56) assign_list -> assign_list , OBJECTID : TYPEID ASSIGN error .
    IN              reduce using rule 56 (assign_list -> assign_list , OBJECTID : TYPEID ASSIGN error .)
    ,               reduce using rule 56 (assign_list -> assign_list , OBJECTID : TYPEID ASSIGN error .)


state 165

    (58) assign_list -> assign_list , OBJECTID : TYPEID ASSIGN expr .
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    IN              reduce using rule 58 (assign_list -> assign_list , OBJECTID : TYPEID ASSIGN expr .)
    ,               reduce using rule 58 (assign_list -> assign_list , OBJECTID : TYPEID ASSIGN expr .)
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 166

    (62) case_list -> case_list OBJECTID : TYPEID DARROW expr . ;
    (27) expr -> expr . = expr
    (28) expr -> expr . = expr = expr
    (29) expr -> expr . LE expr
    (30) expr -> expr . LE expr LE expr
    (31) expr -> expr . < expr
    (33) expr -> expr . / expr
    (34) expr -> expr . * expr
    (35) expr -> expr . - expr
    (36) expr -> expr . + expr
    (45) expr -> expr . @ TYPEID . OBJECTID ( arg_list )
    (46) expr -> expr . . OBJECTID ( arg_list )
    (47) expr -> expr . @ TYPEID . OBJECTID ( )
    (48) expr -> expr . . OBJECTID ( )
    ;               shift and go to state 168
    =               shift and go to state 63
    LE              shift and go to state 64
    <               shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    @               shift and go to state 70
    .               shift and go to state 71


state 167

    (63) case_list -> OBJECTID : TYPEID DARROW expr ; .
    ESAC            reduce using rule 63 (case_list -> OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 63 (case_list -> OBJECTID : TYPEID DARROW expr ; .)


state 168

    (62) case_list -> case_list OBJECTID : TYPEID DARROW expr ; .
    ESAC            reduce using rule 62 (case_list -> case_list OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        reduce using rule 62 (case_list -> case_list OBJECTID : TYPEID DARROW expr ; .)


Conflicts:

shift/reduce conflict for = in state 126 resolved as shift
shift/reduce conflict for LE in state 126 resolved as shift
shift/reduce conflict for < in state 126 resolved as shift
shift/reduce conflict for / in state 126 resolved as shift
shift/reduce conflict for * in state 126 resolved as shift
shift/reduce conflict for - in state 126 resolved as shift
shift/reduce conflict for + in state 126 resolved as shift
shift/reduce conflict for @ in state 126 resolved as shift
shift/reduce conflict for . in state 126 resolved as shift
reduce/reduce conflict in state 134 resolved using rule expr -> expr = expr = expr  [precedence=right, level=3]
rejected rule (expr -> expr = expr  [precedence=right, level=3]) in state 134
reduce/reduce conflict in state 135 resolved using rule expr -> expr LE expr LE expr  [precedence=right, level=3]
rejected rule (expr -> expr LE expr  [precedence=right, level=3]) in state 135